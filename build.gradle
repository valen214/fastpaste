


/*
https://docs.gradle.org/current/javadoc/org/gradle/api/execution/TaskActionListener.html

https://docs.gradle.org/5.0/userguide/multi_project_builds.html

println("variable: ${System.env.HOME ?: "asdf"}")

https://docs.gradle.org/current/dsl/
org.gradle.api.plugins.ExtraPropertiesExtension.html
*/

buildscript {
    ext.kotlin_version = "1.3.21"

    repositories {
        google()
        jcenter()
        /*
        flatDir {
            dirs "C:/Program Files/Android/Android Studio/lib"
        }
        */
    }
    dependencies {
        classpath "com.android.tools.build:gradle:3.3.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete){
    delete rootProject.buildDir
}

/*
above build scipt is almost the same as the default android studio root

*/

subprojects {
    apply plugin: "com.android.application"
    apply plugin: "kotlin-android"
    apply plugin: "kotlin-android-extensions"

    ext.project_package = System.env.PROJECT_PACKAGE ?: (
            "com.android.${project.name}")
    println("project.name: ${project.name}")
    
    // println(project.configurations)

    android {
        // assert System.getenv("ANDROID_HOME") != null
        /***** /
        variantFilter{ variant ->
            if(variant.buildType.name == "debug"){
                // setIgnore(true)
                project.properties.each{ key, value ->
                    switch(key){
                        case "properties": break
                        case "configurations": break
                        default: println("${key}: ${value}")
                    }
                }
            }
        }
        /*****/

        applicationVariants.all{ variant ->
        /*
            rootProject.projectDir.forEach{ key, value ->
                println("${key}: ${value}")
            }
        */
            ext.build_type = variant.buildType.name
            variant.outputs.all{ output ->
                def fileName = "bin/${project.name}-${variant.name}.apk"

                outputFileName = "../../../../../" + fileName
                // ${variant.versionName}
                println("outputFileName: ${outputFileName}")

                clean.doLast{
                    delete fileName
                }
                /*
                println("variant.outputs: ${output}")
                if(!output.hasProperty("processManifest")){
                    println("no processManifest, return")
                    return
                }
                output.processManifest.doLast{
                    [
                        output.processManifest.manifestOutputFile,
                        output.processManifest.instantRunManifestOutputFile
                    ].forEach{ File manifestOutFile ->
                        if(manifestOutFile.exists()){
                            def newFileContent =
                                    manifestOutFile.getText("utf-8").replace(
                                    "\${applicationId}", applicationId)
                            manifestOutputFile.write(
                                newFileContent, "utf-8")
                            println(newFileContent)
                        }
                    }
                }
                */
            }
        }

        compileSdkVersion 28
        buildToolsVersion "28.0.3"

        defaultConfig {
            applicationId project_package
            applicationIdSuffix ""
            minSdkVersion 18
            targetSdkVersion 28
            versionCode 1
            versionName "1.0"
            multiDexEnabled true
            testInstrumentationRunner(
            /*
                    "android.support.test.runner.AndroidJUnitRunner")
            /*/
                    "androidx.test.runner.AndroidJUnitRunner")
            /*****/
            // manifest variables
            manifestPlaceholders = [
                    full_package: project_package
            ]
        }

        signingConfigs {
            release {
                // keytool -genkeypair -validity 365 -keystore bin\key.keystore -keyalg RSA -keysize 2048
                storeFile file("../bin/key.keystore")
                storePassword "TemporaryPassword"
                keyAlias "mykey"
                keyPassword "TemporaryPassword"
            }
        }
        buildTypes {
            release  {
                signingConfig signingConfigs.release

                minifyEnabled true
                // more or less useless
                proguardFiles getDefaultProguardFile("proguard-android.txt")
                // proguardFiles "proguard-android.txt" // "proguard-rules.pro"
            }
        }

        sourceSets {
            main {
                setRoot "src"
                kotlin.srcDirs = ["src", "../android_util/src"]
                java.srcDirs = ["src"]
                res.srcDirs = ["res", "../android_util/res"]
                manifest.srcFile "AndroidManifest.xml"

                // buildDir = "bin"
                // systemProperty "sdk.dir" ""
            }
        }
    }

    dependencies {
        // implementation fileTree(dir: 'libs', include: ['*.jar'])
        /*
        implementation fileTree(
                dir: 'bulid/intermediates/javac/release',
                include: ['*.class'])
        */
        
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
        implementation "com.android.support:appcompat-v7:28.0.0"
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        testImplementation (
                "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version")
        testImplementation 'junit:junit:4.12'
        androidTestImplementation 'com.android.support.test:runner:1.0.2'
    }
}


/*
println rootProject.allprojects.tasks
println(rootProject.getAllTasks(true))
gradle.taskGraph.whenReady { graph ->
    def projects = graph.allTasks.collect { it.project }.toSet()
    projects.each {
        println "Project is being used in this build: " + it
    }
}
*/

task custom_assemble(type: GradleBuild){
    tasks = ['clean', 'assemble', 'lint']
}

/*
project.gradle.buildFinished{ buildResult ->
    buildResult.getFailure()?.let{
        println("build failed")
    }
}
*/

