


/*
https://docs.gradle.org/current/javadoc/org/gradle/api/execution/TaskActionListener.html

*/


buildscript {
    ext.kotlin_version = "1.3.21"

    repositories {
        google()
        jcenter()
        /*
        flatDir {
            dirs "C:/Program Files/Android/Android Studio/lib"
        }
        */
    }
    dependencies {
        classpath "com.android.tools.build:gradle:3.3.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    // id "org.jetbrains.kotlin.jvm" version "1.3.21"
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"

allprojects
{
    repositories {
        google()
        jcenter()
    }
}

android {
    // assert System.getenv("ANDROID_HOME") != null

    /*
    // applicationVariants.all{ variant ->
    variantFilter{ variant ->
        if(variant.buildType.name == "debug"){
            setIgnore(true)
        } else{
            println("variant: ${variant}")
        }
    }
    /*****/

    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        applicationId "com.randommain.fastpaste"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            // keytool -genkeypair -validity 365 -keystore bin\key.keystore -keyalg RSA -keysize 2048
            storeFile file("bin/key.keystore")
            storePassword "TemporaryPassword"
            keyAlias "mykey"
            keyPassword "TemporaryPassword"
        }
    }
    buildTypes {
        release  {
            signingConfig signingConfigs.release

            minifyEnabled true
            // more or less useless
            proguardFiles getDefaultProguardFile("proguard-android.txt")
        }
    }

    sourceSets {
        main {
            setRoot "src"
            kotlin.srcDirs = ["src"]
            java.srcDirs = ["src"]
            res.srcDirs = ["res"]
            manifest.srcFile "AndroidManifest.xml"

            // buildDir = "bin"
            // systemProperty "sdk.dir" ""
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:appcompat-v7:28.0.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

task cleanApk(type: Delete){
    delete "bin/app.apk"
}
clean.dependsOn(cleanApk)

task copyApkToBin(type: Copy){
    from file("build/outputs/apk/release/app-release.apk")
    into file("bin/")
    // rename '(.+)-staging(.+)', '$1$2'
    rename "app-release.apk", "app.apk"
    println("copied app.apk")
    /*
    rootProject.assemble.properties.each{ key, value ->
        println("$key: $value")
    }
    */
}
rootProject.assemble.finalizedBy copyApkToBin
/*
println rootProject.allprojects.tasks
println(rootProject.getAllTasks(true))
gradle.taskGraph.whenReady { graph ->
    def projects = graph.allTasks.collect { it.project }.toSet()
    projects.each {
        println "Project is being used in this build: " + it
    }
}
*/

task custom_assemble(type: GradleBuild){
    tasks = ['clean', 'assemble', 'lint']
    println("file:///D:/workspace/main-custom-project/code/android/app/build/reports/lint-results.html#GradleOverrides")
}
